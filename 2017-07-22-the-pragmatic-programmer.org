#+TITLE: 程序员修炼之道

* 引子
** 软件开发的变化并不大
  
   采用更能保证开发结果的方法论，多以敏捷技术为基础。

   更动态的语言（比如 Python 和 Ruby）的普及率上升。

   优秀的程序员都会采用务实和实践的方法。

   他们知道变化越多，掌握事物的基本原则就越重要。

** 前言

   本书将告诉你怎样以一种你能够遵循的方式去编程。

   怎样通过某种编程语言进行表达——这当然重要，但却只是程序员所做的事情的一小部分。

   编程是一项充满了各种细节的工作，追踪这些细节需要专注。

   在做某件事时，要把注意力投注在所做的事情上——然后尝试着把它做得更好。

   模式就是解决方案。

** 序
  
   成为更好的程序员。

   更好地完成工作。

   利用经验做出更有见识的决策。

   编程是一种技艺。用最简单的话表述，编程可归结为让计算机做你（或你的用户）想做的事情。

   编程是艰难的工作。

   不存在最佳解决方案这样一种东西，无论它是工具，是语言，还是操作系统。

   能够存在的只是在某些特定情形下更为适宜的系统。

   我不该局限于任何特定的技术，而是拥有足够广博的背景和经验基础，以让我能在特定的情况下选择好的解决方案。

   我的背景源自对计算机科学的基本原理的理解，而我的经验来自广泛的实际项目。

   理论和实践的结合使我强大起来。

   我要调整我的方法，以适应当前的情形与环境。我要判读对项目有影响的所有的因素的相对重要性，并利用我的经验制定适宜的解决方案。

   我要随着工作的进展持续不断地进行这样的活动。

   注重实效的程序员不仅要完成工作，而且要完成得漂亮。

** 谁应该阅读本书

   想变得更为有效、更多产的程序员。

** 注重实效的程序员有哪些特征

*** 早期的采纳者／快速的改编者
   
    我要具有技术和技巧上的直觉，我要喜爱尝试各种事物。

    给我一样新东西，我要很快就能把握它，并把它与我的知识的其余部分结合在一起。

    我的自信出自经验。

*** 好奇

    我要喜欢提问。

    我是收集小知识的林鼠，每一条小知识都可能影响今后几年里的决策。
   
*** 批判的思考者

    我不会不首先抓住事实而照搬别人的说法。

*** 有现实感

    我要设法理解我面临的每个问题的内在本质。
   
    这样的现实注意会给我良好的感知能力：事情有多困难，需要多长时间？

    让自己了解某个过程会有困难，或是要用一点时间才能完成，能够给予你坚持不懈的毅力。

*** 多才多艺

    我要尽力熟悉广泛的技术和环境，并且努力工作，以与各种新发展并肩前行。

    尽管我现在的工作也许只要求我称为某方面的专才，我要总是能够转向新的领域和新的挑战。

*** 关心你的技艺

    我要能漂亮地开发出软件。

*** 思考你的工作

    在我做某件事情的时候思考我在做什么。

    我要对每一天、在每一次开发上所做出的每一项决策批判评估。

    不要依靠自动驾驶仪。

    不间断地思考，实时地批判我的工作。

** 它是一个持续的过程

   持续地做出许多小改进。
  
   每天为我所拥有的技能而工作，为把新的工具增加到我的技能列表中而工作。


   

* 第一章 注重实效的哲学 

  我要能够越出直接的问题去思考，要设法把问题放在更大的语境中，要注意更大的图景。

  我要注重实效，我要能做出明智的妥协和有见识的决策。

  我要对我所做的每一件事负责。

  我要拥抱变化。

  我要拥有广泛的知识和经验基础。

  学习是一个持续不断的过程。

  注重实效的编程源于注重实效的思考的哲学。

** 我的源码让猫给吃了

   在所有的弱点中，最大的弱点就是害怕暴露弱点。

*** 负责 

   除了尽我所能以外，我必须分析风险是否超出了我的控制。

   提供各种选择，不要找蹩脚的借口。

   在我的头脑里把谈话预演一遍。

   要提供各种选择，而不是找借口。不要说事情做不到；要说明做什么来挽回局面。

   不要害怕提出需求，也不要害怕承认我需要帮助。

** 软件的熵

   熵是一个来自物理学的概念，指的是某个系统中的“无序”的总量。

   当软件中的无序增长时，程序员称之为“软件腐烂”。

   不要容忍破窗户。

   不要留着“破窗户”（低劣的设计、错误的决策、或是糟糕的代码）不修。发现一个就修一个。如果没有足够的时间进行适当的修理，就用木板把它钉起来。

*** 灭火
     
     我不要成为第一弄脏东西的人。

     一扇破窗户——一段设计低劣的代码、一项糟糕的管理决策——就足以使项目开始衰败。

** 石头汤与煮青蛙

   在有些情况下，我也许确切地知道需要做什么，以及怎样去做。但请求许可去处理整个事情，你会遇到拖延和漠然。这时，设计出我可以合理要求的东西，好好开发它。一旦完成，就拿给大家看，让他们大吃一惊。然后说：“要是我们增加……可能就会更好。”假装那并不重要。

   做变化的催化剂。

   过于集中注意力，可能会忘了世界的其他部分。

   留心大图景。我要持续不断地观察周围发生的事情，而不只是我自己在做的事情。

** 足够好的软件
   
   欲求更好，常把好事变糟。

   应该给用户以机会，让他们参与决定我所制作的东西何时已足够好。

*** 让你的用户参与权衡

    我所制作的系统的范围和质量应该作为系统需求的一部分规定下来。

    使质量成为需求问题。

    如果你要给用户某样东西，让他们及早使用。他们的反馈常常会把我引向更好的最终解决方案。

*** 知道何时止步

    不要因为过度修饰和过于求精而毁损完好的程序。继续前进，让我的代码凭借着自己的质量站一会儿。

    它也许不完美，但不用担心；它不可能完美。

** 你的知识资产

   知识上的投资总能得到最好的回报。

   我的知识和经验是我最重要的职业财富。遗憾的时，它们是有时效的资产。随着新技术、语言及环境的出现，我的知识会变得过时。

   不断变化的市场驱动力也许会使我的经验变得陈旧或无关紧要。

   随着我的知识的价值的降低，对我的公司或客户来说，我的价值也在降低。

*** 你的知识资产

    1. 严肃的投资者定期投资——作为习惯。
    2. 多元化是长期成功的关键。
    3. 聪明的投资者在保守的投资和高风险、高回报的投资之间平衡它们的资产。
    4. 投资者设法低买高卖，以获取最大的回报。
    5. 应周期性地重新评估和平衡资产。

*** 经营你的资产
**** 定期投资
**** 多元化
**** 管理风险
**** 低买高卖
**** 重新评估和平衡

  定期为你的知识资产投资。
  
*** 目标
    
**** 每年至少学习一种新语言
**** 每季度阅读一本技术书籍
**** 也要阅读非技术书籍
**** 上课
**** 参加本地用户组织
**** 试验不同的环境
**** 跟上潮流
**** 上网

*** 学习的机会

    不要就此止步，把找到答案视为对我个人的挑战。

    如果我自己找不到答案，就去找出能找到答案的人。不要把问题搁在那里。

    所有阅读和研究都需要时间，而时间已经很短缺。所以我需要预先规划。让自己在空闲的片刻时间力总有东西可读。

*** 批判的思考

    批判地思考我读到的和我听到的。
    
    我需要确保我的资产中的知识是准确的。

    批判地分析你读到的和听到的

** 交流

   我相信，被大量比被忽略要好。

   问题不只是我有什么，还要看我怎样包装它。

   除非我能够与他人交流，否则就算我拥有最好的注意、最漂亮的代码、或是最注重实效的想法，最终也会毫无结果。

*** 知道你想要说什么
    
    在工作中使用的更为正式的交流方式中，最困难的部分也许是确切地弄清楚我想要说什么。

    规划我想要说的东西。写出大纲，然后问我自己：“这是否讲清了我要说的所有内容？”提炼它，直到确实如此为止。

*** 了解你的听众

    只有当你是在传递信息时，你才是交流。为此，我需要了解我的听众的需要、兴趣、能力。

    要在脑海里形成一幅明确的关于我的听众的画面。

*** 选择时机

    为了了解我的听众需要听到什么，我需要弄清楚他们的“轻重缓急”是什么。

    要让我所说的适得其时，在内容上确实相关。

*** 选择风格

    调整我的交流风格，让其适应我的听众。

*** 让文档美观

*** 让听众参与
    
    获取他们的反馈，并汲取他们的智慧。

*** 做倾听者

    如果我想要大家听我说话，我必须使用一种方法：听他们说话。

*** 回复他人

    我说什么和我怎样说同样重要

    交流越有效，我就越有影响力。

* 提示

** 关心你的技艺

** 思考你的工作

** 提供各种选择，不要找蹩脚的借口

** 不要容忍破窗户

** 做变化的催化剂

** 记住大图景

** 使质量成为需求问题

** 定期为你的知识资产投资

** 批判地分析你读到的和听到的

** 你说什么和你怎样说同样重要 
