#+TITLE: 《操作系统设计与实现》读书笔记

* 引言
   软件是计算机系统的灵魂，没有软件的计算机就像一个漂亮的花瓶，虚有其表。

   计算机软件大致可以分为两类，即系统软件和应用软件。

   系统软件负责管理计算机本身的运作，而应用软件则负责完成用户所需要的各种功能。
    
   最基本的系统软件是操作系统，它负责管理计算机的所有资源并提供一个可以在其上编写应用程序的平台。

   让程序员从复杂、繁琐的硬件操作中解脱出来的做法是在裸机上引入一层软件，让它来管理系统的各个部件，并给上一层的用户提供一个易于理解和编程的接口（或者称为虚拟机）。这样的一层软件就是操作系统。

   #+BEGIN_SRC dot :file assets/images/computer.png :exports results
   digraph structs {
    node [shape=record];
    a [label="{{应用程序}|{系统程序}|{机器语言}|{微体系结构}|{物理设备}}"];    
   }
   #+END_SRC

   #+RESULTS:
   [[file:assets/images/computer.png]]

   计算机系统由硬件、系统程序和应用程序组成

   在计算机系统的底层是硬件。最底层是物理设备，包括集成电路芯片、线路、电源等，物理设备的内部结构和工作原理，属于电气工程的范畴。

   在微体系结构层，各个物理设备被组织成一些功能单元，如中央处理器内部的一些寄存器、涉及算术逻辑单元的数据流程等。

   在每个时钟周期，一个或两个操作数将被从寄存器中取出来，并在算术逻辑单元中进行运算，运算的结果保存在一个或多个寄存器中，这样就完成了一次数据流程。

   数据流程的目的是为了执行一组指令，有些指令可以在一个数据流程周期中完成，而有些可能需要多个周期。指令在执行时，可以使用寄存器或其他的运算部件。一般来说，这些指令的功能和用法是公开的，汇编语言程序员可以看到。硬件和指令在一起，就组成了指令集体系结构。这一层通常也称为机器语言。

   机器语言通常有50-300条指令，其中多数用来完成数据传送、算术运算和数值比较等操作。在这个层次上，可以通过向特殊的设备寄存器写入特定的数值来控制输入／输出设备。

   操作系统的一个主要功能就是将硬件的这些复杂性封装起来，给程序员提供一个更方便的编程接口。

   所谓操作系统，一般是指在内核态或称管态下运行的软件，它受到硬件的保护，用户不能随便去篡改它的内容。

** 什么是操作系统
   操作系统具有两个互不相关的功能：扩展机和资源管理。
*** 操作系统作为扩展机
    对多数计算机而言，在机器语言一级的体系结构（指令集、存储组织、I／O 和总线结构）上编程是比较困难的，尤其是输入输出操作。
    
    负责将硬件细节与程序员隔离开来，并提供一个简单、方便的文件访问方式的程序，当然就是操作系统。对于每一个硬件，操作系统都提供了一个简单、好用的抽象接口。

    从这个角度来看，操作系统的功能就是为用户提供一台等价的扩展计算机，或称虚拟机，它比底层硬件更容易编程。
    
    但操作系统是如何做到这一点的呢？间单地说，就是操作系统提供了各式各样的服务，用户程序可以通过称为系统调用的特殊指令来使用这些服务。

*** 操作系统作为资源管理器
    上述的虚拟机模型是一种自顶向下的观点。反之，如果按照自底向上的观点，则可以把操作系统视为一个复杂系统的管理者。

    现代计算机都包含处理器、存储器、定时器、磁盘、鼠标、网络接接口、打印机一级其他的各种设备，从这个角度讲，操作系统的任务就是在相互竞争的程序之间，如何有序地控制这些硬件设备的分配。
    
    当一台计算机有多个用户时，由于用户之间可能会相互干扰，因此必需更好地管理和保护存储器、I／O设备和其他各种资源。此外，在不同的用户之间，不仅需要共享硬件设备，有时还需要共享信息。

    从资源管理器的角度来说，操作系统的主要任务是跟踪资源的使用状况、满足资源请求、提高资源利用率，以及协调不同程序和用户对资源的访问冲突。

    资源管理主要包括两种形式的资源共享：时间上的资源共享和空间上的资源共享。

    所谓时间上的资源共享，指的是各个程序或用户轮流使用该资源，开始是一个程序使用，然后是另一个程序在使用，等等。

    所谓空间上的资源共享，指的是每个程序不是轮流去使用资源，而是把资源划分为若干份，然后分配给各个程序。


** 操作系统的发展史
** MINIX 3 的历史
** 操作系统概念
   操作系统与用户程序之间的接口由操作系统提供的“扩展指令”集来定义。这些扩展指令集传统上被称为系统调用，它们的实现方法多种多样。

   MINIX 3 的系统调用大致可以分为两类：与进程有关的系统调用和与文件有关的系统调用。

*** 进程
    从本质上来说，一个进程就是一个正在执行的程序。
    
    每个进程都有自己的地址空间，也就是一组内存地址，从某个最小值（通常是0）到某个最大值，进程可以读写其中的内容。地址空间中包括可执行程序、程序的数据和它的栈。
    
    与每个进程相关的还有一组寄存器，如程序计数器、栈指针和其他硬件寄存器，以及运行该程序所需要的所有其他信息。
    
    为了对进程有一种直观的感觉，我们可以考虑一下分时系统的工作原理。

    每个一定的周期，操作系统就会暂停当前进程的执行，转而启动另一个进程。

    假设一个进程被暂时挂起，那么后来当它需要重新运行的时候，就要求此刻的状态与先前的暂停时的状态完全相同。这就意味着当我们挂起一个进程时，必须把它的所有信息都要保存在某个地方。

    一个进程的所有信息（除了它的地址空间中的内容）均存放在操作系统的一张表中，该表称为进程表，它实际上是一个结构数组（或链表），系统中的每个进程都要占用其中的一项。
    
    因此，对于一个被挂起的进程，它主要包括两部分的内容。一是进程的地址空间，称为内核映像，二是相应的进程表项，包含寄存器值及其他信息。

    在与进程管理有关的系统调用中，最主要的是进程的创建和终止。

    一般来说，一个进程能够创建一个或多个其他的进程（称为子进程），而且这些子进程又可以创建它们自己的子进程，这样就得到了一棵进程树。

   #+BEGIN_SRC dot :file assets/images/proc_tree.png :exports results

   digraph PROC_TREE {
     nodesep=0.3;
     ranksep=0.2;
     margin=0.1;
     node [shape=circle];
     edge [arrowsize=0.8];
     A -> B;
     A -> C;
     B -> D;
     B -> E;
     B -> F;
   }

   #+END_SRC

   #+RESULTS:
   [[file:assets/images/proc_tree.png]]

   有时，一组相关的进程需要相互合作，共同完成某任务，这样它们就需要相互通信一协调格子的进展，这种通信称为进程间通信。

   与进程有关的其他系统调用包括请求更多的内存（或释放不再使用的内存）、等待一个子进程结束、加载并执行另一个程序等。

   有时，我们需要向一个正在运行的进程传送消息，而该进程并不是无所事事，专门等待消息的到来。

   从某种意义上来说，信号有点类似于硬件中断，只不过它是一种纯软件机制。

   MINIX 3 的每一个合法用户都有一个由管理员分配的用户标识号（UID）。

   对于系统中的每一个进程，都记录有启动它的用户的UID。

   子进程的UID与其父进程的相同。

   此外，用户可以是某个组的成员，每个组都有一个组标识号（GID）。

   系统中有一个特殊的用户——超级用户，他拥有特殊的权力，许多保护规则对他无效。
